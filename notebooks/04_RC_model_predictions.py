import numpy as np
import pandas as pd
import xarray as xr
from notebooks.models import * 
from collections import namedtuple
import pickle
from soil_diskin.age_dist_utils import predict_fnew
from soil_diskin.data_wrangling import parse_he_data
from notebooks.constants import *
from scipy.integrate import solve_ivp
from scipy.io import loadmat
from joblib import Parallel, delayed, parallel_backend

"""
Runs the reduced complexity models generated by He. et al.
for the sites in the Balesdent dataset and saves the 
predictions to a pickle file.
"""
# Timestamp for saving files
current_date = pd.Timestamp.now().date().strftime("%d-%m-%Y")

# Load the site data
site_data = pd.read_csv('results/processed_balesdent_2018.csv')
turnover_14C = pd.read_csv('results/all_sites_14C_turnover.csv')

#%% Create reduced complexity model predictions
print("Generating reduced complexity model predictions...")
model_names = {'CESM':'CESM1','IPSL':'IPSL-CM5A-LR','MRI':'MRI-ESM1'}
file_names = {'CESM':'areacella_fx_CESM1-BGC_1pctCO2_r0i0p0','IPSL':'areacella_fx_IPSL-CM5A-LR_historicalNat_r0i0p0','MRI':'areacella_fx_MRI-ESM1_esmControl_r0i0p0'}

tropical_site_params = []
for model in ['CESM','IPSL','MRI']:
    mod = parse_he_data(model=model, file_names=file_names)
    extrapolated =  xr.concat([mod.sel(parameter=p).rio.write_nodata(np.nan).rio.set_spatial_dims('lon','lat').rio.write_crs(4326).rio.interpolate_na() for p in mod.parameter],dim='parameter')

    tropical_site_params.append(xr.concat([extrapolated.sel(lat=site_data.iloc[i]['Latitude'],lon=site_data.iloc[i]['Longitude'],method='ffill') for i in range(site_data.shape[0])],dim='site'))

tropical_site_params = xr.concat(tropical_site_params,dim='model')
tropical_site_params['model'] = ['CESM','IPSL','MRI']

RCM_config = namedtuple('Config', ['model','tau_fac', 'rs_fac', 'correct'])
RCM_config.tau_fac = {'CESM': 3.7, 'IPSL': 14, 'MRI': 13} # from Sierra et al. 2018
RCM_config.rs_fac = {'CESM': 0.34, 'IPSL': 0.07, 'MRI': 0.34} # Sierra et al. 2018
RCM_config.correct = True
RCM_params = namedtuple('Params', ['params'])

# model_name = 'CESM'
# ReducedComplexModel
# RCM_config.model = model_name
def RCM_predict_site(model_name, i, RCM_config, RCM_params, site_data):
    """Predict the age distribution for a given site using the Reduced Complexity Model."""
    RCM_config.model = model_name
    RCM_params.params = tropical_site_params.sel(model=[model_name])[0, i, :].values
    RCM_model = ReducedComplexModel(RCM_config, RCM_params)
    return RCM_model.cdf(np.array([site_data.iloc[i]['Duration_labeling']]))
# RCM_params.params = tropical_site_params.sel(model=[model_name])[0, i, :].values
# RCM_model = ReducedComplexModel(RCM_config, RCM_params)
# RCM_model.cdf(np.array([site_data.iloc[i]['Duration_labeling']]))
RCM_predictions = []
for model in model_names.keys():
    prediction = np.array([RCM_predict_site(model, i, RCM_config, RCM_params, site_data) for i in range(len(site_data))])
    RCM_predictions.append(prediction)
RCM_predictions = pd.DataFrame(np.array(RCM_predictions).squeeze(), index = model_names.values()).T
# Save the model predictions
RCM_predictions.to_csv(f'results/04_model_predictions/RCM_{current_date}.csv', index=False)
# %%
